import { app, BrowserWindow, ipcMain } from 'electron';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

class Main {
    private mainWindow: BrowserWindow;

    public init() {
        // Handle creating/removing shortcuts on Windows when installing/uninstalling.
        if (require('electron-squirrel-startup')) {
            app.quit();
        }
        // This method will be called when Electron has finished
        // initialization and is ready to create browser windows.
        // Some APIs can only be used after this event occurs.
        app.on('ready', this.createWindow);

        // Quit when all windows are closed, except on macOS. There, it's common
        // for applications and their menu bar to stay active until the user quits
        // explicitly with Cmd + Q.
        app.on('window-all-closed', () => {
            if (process.platform !== 'darwin') {
                app.quit();
            }
        });

        app.on('activate', () => {
            // On OS X it's common to re-create a window in the app when the
            // dock icon is clicked and there are no other windows open.
            if (BrowserWindow.getAllWindows().length === 0) {
                this.createWindow();
            }
        });

    }

    private createWindow() {
        // Create the browser window.
        this.mainWindow = new BrowserWindow({
            titleBarStyle: 'hidden',
            titleBarOverlay: {
                color: "#4F6D7A",
                symbolColor: "#EAEAEA",
                height: 39
            },
            width: 800,
            height: 600,
            webPreferences: {
                sandbox: true,
                preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            },
        });

        // and load the index.html of the app.
        this.mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

        // Open the DevTools.
        this.mainWindow.webContents.openDevTools();
    }

}

// Run Code
(new Main()).init();

ipcMain.handle('ping', () => 'pong');
ipcMain.handle('foo', () => {
    return 'bar';
});
ipcMain.handle('add-numbers', (event, num1, num2) => {
    return num1+num2;
});
ipcMain.handle('add-numbers-alt', (event, num1, num2) => num1+num2);
ipcMain.handle('method-with-args', (event, args: any[]) => methodWithArgs(args));
ipcMain.handle('method-with-args-alt', (event, args: any[]) => methodWithArgsAlt(args));

function methodWithArgs(args: any[]) {
    console.log(args);
}

function methodWithArgsAlt(args: any[]) {
    console.log(args);
}

//
